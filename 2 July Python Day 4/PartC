1.
def lengthOfLongestSubstring(self, s: str) -> int:
        res = 0
        q = deque()
        for c in s:
            if c in q:
                while q.popleft() != c:
                    pass
            q.append(c)
            res = max(res, len(q))
        
        return res
2.
def convert(self, s: str, numRows: int) -> str:
        if numRows == 1:
            return s
            
        row_arr = [""] * numRows
        row_idx = 1
        going_up = True

        for ch in s:
            row_arr[row_idx-1] += ch
            if row_idx == numRows:
                going_up = False
            elif row_idx == 1:
                going_up = True
            
            if going_up:
                row_idx += 1
            else:
                row_idx -= 1
        
        return "".join(row_arr)
3.
def threeSumClosest(self, nums: List[int], target: int) -> int:

        n = len(nums)
        nums.sort()
        diff = 20001
        val = 0
        for i in range(n):
            a = i + 1
            b = n - 1
            while(a < b):
                cc = nums[i] + nums[a] + nums[b]
                kk = abs(cc - target)
                if(kk < diff):
                    diff = kk
                    val = cc
                if(cc == target):
                    return target
                elif(cc < target):
                    a += 1
                else:
                    b -= 1
            
        return val
4.
def generateParenthesis(self, n: int) -> List[str]:
	def dfs(left, right, s):
		if len(s) == n * 2:
			res.append(s)
			return 

		if left < n:
			dfs(left + 1, right, s + '(')

		if right < left:
			dfs(left, right + 1, s + ')')

	res = []
	dfs(0, 0, '')
	return res

5.
def multiply(self, num1: str, num2: str) -> str:
        if num1 == '0' or num2 == '0':
            return '0'
        
        def decode(num):
            ans = 0
            for i in num:
                ans = ans*10 +(ord(i) - ord('0'))
            return ans

        def encode(s):
            news = ''
            while s:
                a = s % 10
                s = s // 10
                news = chr(ord('0') + a) + news
            return news
        
        return encode(decode(num1)*decode(num2))
# 1. Longest Substring Without Repeating Characters
def lengthOfLongestSubstring(s: str) -> int:
    res = 0  # Variable to store the maximum length of substring found
    q = deque()  # Deque to store the current substring characters
    for c in s:
        if c in q:
            # Remove characters from the deque until the repeating character is removed
            while q.popleft() != c:
                pass
        q.append(c)  # Add the current character to the deque
        res = max(res, len(q))  # Update the maximum length
    return res

# 2. Zigzag Conversion
def convert(s: str, numRows: int) -> str:
    if numRows == 1:
        return s

    row_arr = [""] * numRows  # Initialize a list of strings for each row
    row_idx = 1
    going_up = True

    for ch in s:
        row_arr[row_idx-1] += ch  # Add the character to the current row
        if row_idx == numRows:
            going_up = False
        elif row_idx == 1:
            going_up = True

        if going_up:
            row_idx += 1
        else:
            row_idx -= 1

    return "".join(row_arr)  # Join all rows to get the final string

# 3. 3Sum Closest
def threeSumClosest(nums: List[int], target: int) -> int:
    n = len(nums)
    nums.sort()  # Sort the array
    diff = 20001
    val = 0
    for i in range(n):
        a = i + 1
        b = n - 1
        while a < b:
            cc = nums[i] + nums[a] + nums[b]
            kk = abs(cc - target)
            if kk < diff:
                diff = kk
                val = cc
            if cc == target:
                return target
            elif cc < target:
                a += 1
            else:
                b -= 1
    return val

# 4. Generate Parentheses
def generateParenthesis(n: int) -> List[str]:
    def dfs(left, right, s):
        if len(s) == n * 2:
            res.append(s)
            return 

        if left < n:
            dfs(left + 1, right, s + '(')

        if right < left:
            dfs(left, right + 1, s + ')')

    res = []
    dfs(0, 0, '')
    return res

# 5. Multiply Strings
def multiply(num1: str, num2: str) -> str:
    if num1 == '0' or num2 == '0':
        return '0'

    def decode(num):
        ans = 0
        for i in num:
            ans = ans*10 +(ord(i) - ord('0'))
        return ans

    def encode(s):
        news = ''
        while s:
            a = s % 10
            s = s // 10
            news = chr(ord('0') + a) + news
        return news

    return encode(decode(num1)*decode(num2))

# 6. Group Anagrams
def groupAnagrams(strs: List[str]) -> List[List[str]]:
    strs_table = {}

    for string in strs:
        sorted_string = ''.join(sorted(string))

        if sorted_string not in strs_table:
            strs_table[sorted_string] = []

        strs_table[sorted_string].append(string)

    return list(strs_table.values())

# 7. Multiply Strings (duplicate of 5, removed)

# 8. Jump Game
def canJump(nums: List[int]) -> bool:
    gas = 0
    for n in nums:
        if gas < 0:
            return False
        elif n > gas:
            gas = n
        gas -= 1
    return True

# 9. Unique Paths
def uniquePaths(m: int, n: int) -> int:
    dp = [[1 if i == 0 or j == 0 else 0 for j in range(n)] for i in range(m)]

    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]

    return dp[-1][-1]

# 10. Text Justification
def fullJustify(words: List[str], maxWidth: int) -> List[str]:
    result, current_list, num_of_letters = [],[], 0
    # result -> stores final result output
    # current_list -> stores list of words which are traversed but not yet added to result
    # num_of_letters -> stores number of chars corresponding to words in current_list

    for word in words:
        # total no. of chars in current_list + total no. of chars in current word
        # + total no. of words ~= min. number of spaces between words
        if num_of_letters + len(word) + len(current_list) > maxWidth:
            # size will be used for module "magic" for round robin
            # we use max. 1 because at least one word would be there and to avoid modulo by 0
            size = max(1, len(current_list)-1)

            for i in range(maxWidth-num_of_letters):
                # add space to each word in round robin fashion
                index = i % size
                current_list[index] += ' '

            # add current line of words to the output
            result.append("".join(current_list))
            current_list, num_of_letters = [], 0

        # add current word to the list and add length to char count
        current_list.append(word)
        num_of_letters += len(word)

    # form last line by join with space and left justify to maxWidth using ljust (python method)
    # that means pad additional spaces to the right to make string length equal to maxWidth
    result.append(" ".join(current_list).ljust(maxWidth))

    return result

6.
def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        strs_table = {}

        for string in strs:
            sorted_string = ''.join(sorted(string))

            if sorted_string not in strs_table:
                strs_table[sorted_string] = []

            strs_table[sorted_string].append(string)

        return list(strs_table.values())
7.
def multiply(self, num1: str, num2: str) -> str:
        if num1 == '0' or num2 == '0':
            return '0'
        
        def decode(num):
            ans = 0
            for i in num:
                ans = ans*10 +(ord(i) - ord('0'))
            return ans

        def encode(s):
            news = ''
            while s:
                a = s % 10
                s = s // 10
                news = chr(ord('0') + a) + news
            return news
        
        return encode(decode(num1)*decode(num2))
8.
def canJump(self, nums: List[int]) -> bool:
        gas = 0
        for n in nums:
            if gas < 0:
                return False
            elif n > gas:
                gas = n
            gas -= 1
            
        return True

9.
def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1 if i == 0 or j == 0 else 0 for j in range(n)] for i in range(m)]
        
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
                
        return dp[-1][-1]

10.
def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
            
        result, current_list, num_of_letters = [],[], 0
        # result -> stores final result output
        # current_list -> stores list of words which are traversed but not yet added to result
        # num_of_letters -> stores number of chars corresponding to words in current_list
        
        for word in words:
            
            # total no. of chars in current_list + total no. of chars in current word
            # + total no. of words ~= min. number of spaces between words
            if num_of_letters + len(word) + len(current_list) > maxWidth:
                # size will be used for module "magic" for round robin
                # we use max. 1 because atleast one word would be there and to avoid modulo by 0
                size = max(1, len(current_list)-1)
                
                for i in range(maxWidth-num_of_letters):
                    # add space to each word in round robin fashion
                    index = i%size
                    current_list[index] += ' ' 
                
                # add current line of words to the output
                result.append("".join(current_list))
                current_list, num_of_letters = [], 0
            
            # add current word to the list and add length to char count
            current_list.append(word)
            num_of_letters += len(word)
        
        # form last line by join with space and left justify to maxWidth using ljust (python method)
        # that means pad additional spaces to the right to make string length equal to maxWidth
        result.append(" ".join(current_list).ljust(maxWidth))
        
        return result